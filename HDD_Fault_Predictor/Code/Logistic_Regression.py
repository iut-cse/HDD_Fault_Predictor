# -*- coding: utf-8 -*-
"""LogisticRegressionImplementation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZCu5PLwIOMW5OrQjyHa8BGZBIe0fAiUZ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split



def _sigmoid(x):
  return 1 / (1 + np.exp(-x))

def fit(X,y):
  lr=0.01
  n_iters=3000
  n_samples, n_features = X.shape
  w=[0]*4
  w1=0
  w2=0
  w3=0
  w4=0
  bias=0
  for i in range(n_iters):
    linear_model = np.dot(X, w) + bias
    y_predicted = _sigmoid(linear_model)
    for j in range(n_samples):
      dw1=(1 / n_samples) * np.sum(X[j][0] * (y_predicted[j] - y[j]))
      dw2=(1 / n_samples) * np.sum(X[j][1] * (y_predicted[j] - y[j]))
      dw3=(1 / n_samples) * np.sum(X[j][2] * (y_predicted[j] - y[j]))
      dw4=(1 / n_samples) * np.sum(X[j][3] * (y_predicted[j] - y[j]))
      db = (1 / n_samples) * np.sum(y_predicted[j] - y[j])
      w1=w1-lr*dw1
      w2=w2-lr*dw2
      w3=w3-lr*dw3
      w4=w4-lr*dw4
      bias=bias-lr*db
    w[0]=w1
    w[1]=w2
    w[2]=w3
    w[3]=w4
  return w, bias




def predict(X,weights,bias):
  linear_model = np.dot(X, weights) + bias
  y_predicted = _sigmoid(linear_model)
  y_predicted_cls = [1 if i > 0.5 else 0 for i in y_predicted]
  return np.array(y_predicted_cls)






def accuracy(y_true, y_pred,c):
  accuracy=c/len(y_true)
  return accuracy

def accuracy_result():

  my_data = pd.read_csv("../Data/PCA_Features.csv", delimiter=",")

  X = my_data.iloc[:, 1:5]

  Y = my_data.iloc[:, -1:]

  X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

  weights, bias = fit(X_train.values, y_train.values)
  y_pred = predict(X_test.values, weights, bias)

  c = 0
  for i in range(len(y_pred)):
    if (y_pred[i] == y_test.values[i]):
      c = c + 1



  print(accuracy(y_test.values, y_pred, 123))



